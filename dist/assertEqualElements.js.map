{"version":3,"file":"assertEqualElements.js","sourceRoot":"","sources":["../src/assertEqualElements.ts"],"names":[],"mappings":"AAKA,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,CAAW,EACX,CAAW,EACX,UAA4B,GAAG,EAAE;IAC/B,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,OAAO,qBAAqB,IAAI,CAAC,SAAS,CACxC,CAAC,CACF,oBAAoB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;AAC3C,CAAC,EACD,EAAE;IACF,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IAClD,iBAAiB;IACjB,iBAAiB;IACjB,IAAI;IACJ,kBAAkB;IAClB,kBAAkB;IAClB,IAAI;IACJ,yDAAyD;IACzD,eAAe;IACf,aAAa;IACb,aAAa;IACb,eAAe;IACf,0EAA0E;IAC1E,KAAK;IACL,sCAAsC;IACtC,2BAA2B;IAC3B,2BAA2B;IAC3B,8DAA8D;IAC9D,wDAAwD;IACxD,aAAa;IACb,mBAAmB;IACnB,iCAAiC;IACjC,iCAAiC;IACjC,mBAAmB;IACnB,kEAAkE;IAClE,qBAAqB;IACrB,gEAAgE;IAChE,SAAS;IACT,MAAM;IACN,IAAI;AACN,CAAC,CAAC","sourcesContent":["import { assertEqual } from \"./assertEqual\";\nimport type { AssertionMessage } from \"./type/AssertionMessage\";\nimport { lengthOf } from \"./lengthOf\";\nimport type { ListLike } from \"./type/ListLike\";\n\nexport const assertEqualElements = (\n  a: ListLike,\n  b: ListLike,\n  message: AssertionMessage = () => {\n    console.error(a, b);\n    return `Assertion failed: ${JSON.stringify(\n      a\n    )} is not equal to ${JSON.stringify(b)}`;\n  }\n) => {\n  throw new Error(\"assertEqualElements: Bitrotted\");\n  // if (a === b) {\n  //   return true;\n  // }\n  // if (!a || !b) {\n  //   return false;\n  // }\n  // const [aLength, bLength] = [lengthOf(a), lengthOf(b)];\n  // assertEqual(\n  //   aLength,\n  //   bLength,\n  //   message ||\n  //     `Assertion failed: array length ${aLength} not equal to ${bLength}`\n  // );\n  // for (let i = 0; i < aLength; i++) {\n  //   const aElement = a[i];\n  //   const bElement = b[i];\n  //   if (Array.isArray(aElement) && Array.isArray(bElement)) {\n  //     assertEqualElements(aElement, bElement, message);\n  //   } else {\n  //     assertEqual(\n  //       toStableValue(aElement),\n  //       toStableValue(bElement),\n  //       message ||\n  //         `Assertion failed: at index: a[${i}]=>${JSON.stringify(\n  //           aElement\n  //         )} not equal to b[${i}]=>${JSON.stringify(bElement)}`\n  //     );\n  //   }\n  // }\n};\n"]}